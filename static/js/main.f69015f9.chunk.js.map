{"version":3,"sources":["components/card/Card.jsx","components/card-list/CardList.jsx","components/search-box/SearchBox.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","images","id","name","email","CardList","map","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredImages","filter","image","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8UAmBeA,G,MAhBF,SAACC,GACZ,OACE,yBAAKC,UAAU,4BACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OACb,yBACEC,IAAI,gBACJC,IAAG,+BAA0BH,EAAMI,OAAOC,GAAvC,4BAEL,4BAAKL,EAAMI,OAAOE,MAClB,2BAAIN,EAAMI,OAAOG,YCAZC,G,MATE,SAACR,GAChB,OACE,yBAAKC,UAAU,uBACZD,EAAMI,OAAOK,KAAI,SAACL,GAAD,OAChB,kBAAC,EAAD,CAAMM,IAAKN,EAAOC,GAAID,OAAQA,UCOvBO,G,MAZG,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAChC,OACE,yBAAKZ,UAAU,kBACb,2BACEA,UAAU,UACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,OC+BHG,G,wDAnCb,aAAe,IAAD,8BACZ,gBAWFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAXtC,EAAKC,MAAQ,CACXlB,OAAQ,GACRe,YAAa,IAJH,E,gEAOO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAAEd,OAAQuB,S,+BAKnC,IAAD,EACyBC,KAAKN,MAA7BlB,EADD,EACCA,OAAQe,EADT,EACSA,YACVU,EAAiBzB,EAAO0B,QAAO,SAACC,GAAD,OACnCA,EAAMzB,KAAK0B,cAAcC,SAASd,EAAYa,kBAEhD,OACE,yBAAK/B,UAAU,uBACb,yBAAKA,UAAU,kBACb,6CAEF,kBAAC,EAAD,CACEW,YAAY,gBACZC,aAAce,KAAKf,eAErB,kBAAC,EAAD,CAAUT,OAAQyB,S,GA9BRK,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f69015f9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.css\";\r\n\r\nconst Card = (props) => {\r\n  return (\r\n    <div className=\"container card-container\">\r\n      <div className=\"row\">\r\n        <div className=\"col\">\r\n          <img\r\n            alt=\"vector-humans\"\r\n            src={`https://robohash.org/${props.images.id}?set=set5&size=180x180`}\r\n          />\r\n          <h2>{props.images.name}</h2>\r\n          <p>{props.images.email}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"../card/Card\";\r\nimport \"./card-list.css\";\r\n\r\nconst CardList = (props) => {\r\n  return (\r\n    <div className=\"container card-list\">\r\n      {props.images.map((images) => (\r\n        <Card key={images.id} images={images} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\nexport default CardList;\r\n","import React from \"react\";\r\nimport \"./search-box.css\";\r\n\r\nconst SearchBox = ({ placeholder, handleChange }) => {\r\n  return (\r\n    <div className=\"conatiner mt-4\">\r\n      <input\r\n        className=\"search \"\r\n        type=\"search\"\r\n        placeholder={placeholder}\r\n        onChange={handleChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default SearchBox;\r\n","import React, { Component } from \"react\";\nimport CardList from \"./components/card-list/CardList\";\nimport SearchBox from \"./components/search-box/SearchBox\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      images: [],\n      searchField: \"\",\n    };\n  }\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => this.setState({ images: users }));\n  }\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  };\n  render() {\n    const { images, searchField } = this.state;\n    const filteredImages = images.filter((image) =>\n      image.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className=\"App container-fluid\">\n        <div className=\"container mt-5\">\n          <h1>Picture Roll</h1>\n        </div>\n        <SearchBox\n          placeholder=\"search images\"\n          handleChange={this.handleChange}\n        />\n        <CardList images={filteredImages} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}